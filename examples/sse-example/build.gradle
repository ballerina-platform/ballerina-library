/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

description = 'Ballerina - SSE Example'

def packageName = "sse_example"
def packageOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply from: "$rootDir/gradle/javaProject.gradle"
apply from: "$rootDir/gradle/ballerinaLangLibLoad.gradle"

configurations {
    ballerinaStdLibs
}

dependencies {
    /* Standard libraries */
    ballerinaStdLibs "org.ballerinalang:http-ballerina:${stdlibHttpVersion}"
    ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
    ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
    ballerinaStdLibs "org.ballerinalang:data.jsondata-ballerina:${stdlibDataJsonDataVersion}"
}

task updateTomlVersions {
    doLast {
        def stdlibDependentHttpVersion = stripBallerinaExtensionVersion(project.stdlibHttpVersion)
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentTimeVersion = stripBallerinaExtensionVersion(project.stdlibTimeVersion)
        def stdlibDependentDataJsonDataVersion = stripBallerinaExtensionVersion(project.stdlibDataJsonDataVersion)

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.time.version@", stdlibDependentTimeVersion)
        newConfig = newConfig.replace("@stdlib.data.jsondata.version@", stdlibDependentDataJsonDataVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, dependsOn: ballerinaBuild
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/ballerina-library")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

ballerinaBuild.dependsOn ":${packageName}-ballerina:build"
ballerinaBuild.dependsOn updateTomlVersions
ballerinaBuild.finalizedBy revertTomlFile
build.dependsOn ballerinaBuild
